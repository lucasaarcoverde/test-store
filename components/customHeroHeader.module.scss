.customHeroHeader {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 2rem;
  
  .content {
    max-width: 50%;
    color: white;
    
    .title {
      font-size: 2.5rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      color: #ffeb3b;
      text-transform: lowercase;
    }
    
    .subtitle {
      font-size: 1rem;
      margin-bottom: 1.5rem;
      max-width: 80%;
    }
    
    .priceTag {
      display: flex;
      align-items: baseline;
      margin-bottom: 1.5rem;
      
      .currency {
        font-size: 1.2rem;
        font-weight: bold;
      }
      
      .price {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0 0.1rem;
      }
      
      .cents {
        font-size: 1.2rem;
        font-weight: bold;
      }
    }
    
    .ctaButton {
      background-color: #ffeb3b;
      color: black;
      border: none;
      padding: 0.75rem 1.5rem;
      font-weight: bold;
      border-radius: 4px;
      cursor: pointer;
      text-transform: uppercase;
      font-size: 0.9rem;
      
      &:hover {
        background-color: darken(#ffeb3b, 10%);
      }
    }
  }
  
  @media (max-width: 768px) {
    .content {
      max-width: 80%;
      
      .title {
        font-size: 2rem;
      }
      
      .subtitle {
        font-size: 0.9rem;
      }
    }
  }
}
